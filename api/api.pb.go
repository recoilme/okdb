// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Ok
	Empty
	CmdSet
	CmdGet
	ResBytes
	CmdSets
	CmdKeys
	ResKeys
	CmdGets
	ResPairs
	CmdDel
	ResDel
	CmdDelFile
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ok struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Ok) Reset()                    { *m = Ok{} }
func (m *Ok) String() string            { return proto.CompactTextString(m) }
func (*Ok) ProtoMessage()               {}
func (*Ok) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ok) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CmdSet struct {
	File string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Val  []byte `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *CmdSet) Reset()                    { *m = CmdSet{} }
func (m *CmdSet) String() string            { return proto.CompactTextString(m) }
func (*CmdSet) ProtoMessage()               {}
func (*CmdSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CmdSet) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CmdSet) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CmdSet) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

type CmdGet struct {
	File string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CmdGet) Reset()                    { *m = CmdGet{} }
func (m *CmdGet) String() string            { return proto.CompactTextString(m) }
func (*CmdGet) ProtoMessage()               {}
func (*CmdGet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CmdGet) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CmdGet) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ResBytes struct {
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *ResBytes) Reset()                    { *m = ResBytes{} }
func (m *ResBytes) String() string            { return proto.CompactTextString(m) }
func (*ResBytes) ProtoMessage()               {}
func (*ResBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResBytes) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type CmdSets struct {
	File string   `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Keys [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *CmdSets) Reset()                    { *m = CmdSets{} }
func (m *CmdSets) String() string            { return proto.CompactTextString(m) }
func (*CmdSets) ProtoMessage()               {}
func (*CmdSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CmdSets) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CmdSets) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CmdKeys struct {
	File   string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	From   []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Limit  uint32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Asc    bool   `protobuf:"varint,5,opt,name=asc" json:"asc,omitempty"`
}

func (m *CmdKeys) Reset()                    { *m = CmdKeys{} }
func (m *CmdKeys) String() string            { return proto.CompactTextString(m) }
func (*CmdKeys) ProtoMessage()               {}
func (*CmdKeys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CmdKeys) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CmdKeys) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CmdKeys) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CmdKeys) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *CmdKeys) GetAsc() bool {
	if m != nil {
		return m.Asc
	}
	return false
}

type ResKeys struct {
	Keys [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *ResKeys) Reset()                    { *m = ResKeys{} }
func (m *ResKeys) String() string            { return proto.CompactTextString(m) }
func (*ResKeys) ProtoMessage()               {}
func (*ResKeys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResKeys) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CmdGets struct {
	File string   `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Keys [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *CmdGets) Reset()                    { *m = CmdGets{} }
func (m *CmdGets) String() string            { return proto.CompactTextString(m) }
func (*CmdGets) ProtoMessage()               {}
func (*CmdGets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CmdGets) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CmdGets) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ResPairs struct {
	Pairs [][]byte `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (m *ResPairs) Reset()                    { *m = ResPairs{} }
func (m *ResPairs) String() string            { return proto.CompactTextString(m) }
func (*ResPairs) ProtoMessage()               {}
func (*ResPairs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ResPairs) GetPairs() [][]byte {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type CmdDel struct {
	File string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CmdDel) Reset()                    { *m = CmdDel{} }
func (m *CmdDel) String() string            { return proto.CompactTextString(m) }
func (*CmdDel) ProtoMessage()               {}
func (*CmdDel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CmdDel) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CmdDel) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ResDel struct {
	Deleted bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *ResDel) Reset()                    { *m = ResDel{} }
func (m *ResDel) String() string            { return proto.CompactTextString(m) }
func (*ResDel) ProtoMessage()               {}
func (*ResDel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ResDel) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type CmdDelFile struct {
	File string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *CmdDelFile) Reset()                    { *m = CmdDelFile{} }
func (m *CmdDelFile) String() string            { return proto.CompactTextString(m) }
func (*CmdDelFile) ProtoMessage()               {}
func (*CmdDelFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CmdDelFile) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func init() {
	proto.RegisterType((*Ok)(nil), "api.Ok")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*CmdSet)(nil), "api.CmdSet")
	proto.RegisterType((*CmdGet)(nil), "api.CmdGet")
	proto.RegisterType((*ResBytes)(nil), "api.ResBytes")
	proto.RegisterType((*CmdSets)(nil), "api.CmdSets")
	proto.RegisterType((*CmdKeys)(nil), "api.CmdKeys")
	proto.RegisterType((*ResKeys)(nil), "api.ResKeys")
	proto.RegisterType((*CmdGets)(nil), "api.CmdGets")
	proto.RegisterType((*ResPairs)(nil), "api.ResPairs")
	proto.RegisterType((*CmdDel)(nil), "api.CmdDel")
	proto.RegisterType((*ResDel)(nil), "api.ResDel")
	proto.RegisterType((*CmdDelFile)(nil), "api.CmdDelFile")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Okdb service

type OkdbClient interface {
	SayOk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ok, error)
	Set(ctx context.Context, in *CmdSet, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *CmdGet, opts ...grpc.CallOption) (*ResBytes, error)
	Sets(ctx context.Context, in *CmdSets, opts ...grpc.CallOption) (*Empty, error)
	Keys(ctx context.Context, in *CmdKeys, opts ...grpc.CallOption) (*ResKeys, error)
	Gets(ctx context.Context, in *CmdGets, opts ...grpc.CallOption) (*ResPairs, error)
	Delete(ctx context.Context, in *CmdDel, opts ...grpc.CallOption) (*ResDel, error)
	DeleteFile(ctx context.Context, in *CmdDelFile, opts ...grpc.CallOption) (*Empty, error)
}

type okdbClient struct {
	cc *grpc.ClientConn
}

func NewOkdbClient(cc *grpc.ClientConn) OkdbClient {
	return &okdbClient{cc}
}

func (c *okdbClient) SayOk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/api.Okdb/SayOk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okdbClient) Set(ctx context.Context, in *CmdSet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.Okdb/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okdbClient) Get(ctx context.Context, in *CmdGet, opts ...grpc.CallOption) (*ResBytes, error) {
	out := new(ResBytes)
	err := grpc.Invoke(ctx, "/api.Okdb/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okdbClient) Sets(ctx context.Context, in *CmdSets, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.Okdb/Sets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okdbClient) Keys(ctx context.Context, in *CmdKeys, opts ...grpc.CallOption) (*ResKeys, error) {
	out := new(ResKeys)
	err := grpc.Invoke(ctx, "/api.Okdb/Keys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okdbClient) Gets(ctx context.Context, in *CmdGets, opts ...grpc.CallOption) (*ResPairs, error) {
	out := new(ResPairs)
	err := grpc.Invoke(ctx, "/api.Okdb/Gets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okdbClient) Delete(ctx context.Context, in *CmdDel, opts ...grpc.CallOption) (*ResDel, error) {
	out := new(ResDel)
	err := grpc.Invoke(ctx, "/api.Okdb/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okdbClient) DeleteFile(ctx context.Context, in *CmdDelFile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.Okdb/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Okdb service

type OkdbServer interface {
	SayOk(context.Context, *Empty) (*Ok, error)
	Set(context.Context, *CmdSet) (*Empty, error)
	Get(context.Context, *CmdGet) (*ResBytes, error)
	Sets(context.Context, *CmdSets) (*Empty, error)
	Keys(context.Context, *CmdKeys) (*ResKeys, error)
	Gets(context.Context, *CmdGets) (*ResPairs, error)
	Delete(context.Context, *CmdDel) (*ResDel, error)
	DeleteFile(context.Context, *CmdDelFile) (*Empty, error)
}

func RegisterOkdbServer(s *grpc.Server, srv OkdbServer) {
	s.RegisterService(&_Okdb_serviceDesc, srv)
}

func _Okdb_SayOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).SayOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/SayOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).SayOk(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okdb_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).Set(ctx, req.(*CmdSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okdb_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).Get(ctx, req.(*CmdGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okdb_Sets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).Sets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/Sets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).Sets(ctx, req.(*CmdSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okdb_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).Keys(ctx, req.(*CmdKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okdb_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdGets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).Gets(ctx, req.(*CmdGets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okdb_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).Delete(ctx, req.(*CmdDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okdb_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdDelFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkdbServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Okdb/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkdbServer).DeleteFile(ctx, req.(*CmdDelFile))
	}
	return interceptor(ctx, in, info, handler)
}

var _Okdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Okdb",
	HandlerType: (*OkdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayOk",
			Handler:    _Okdb_SayOk_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Okdb_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Okdb_Get_Handler,
		},
		{
			MethodName: "Sets",
			Handler:    _Okdb_Sets_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _Okdb_Keys_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Okdb_Gets_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Okdb_Delete_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Okdb_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x8e, 0xd3, 0x3c,
	0x14, 0xcd, 0x5f, 0x93, 0xce, 0x9d, 0x8c, 0xbe, 0x91, 0xf5, 0x09, 0x45, 0x11, 0x83, 0x22, 0x03,
	0x52, 0x35, 0x48, 0xad, 0x80, 0x37, 0x9e, 0xa0, 0x14, 0xf2, 0xc0, 0x43, 0x47, 0x9e, 0x15, 0xb8,
	0xc4, 0xad, 0xac, 0x24, 0x75, 0xa8, 0xad, 0x91, 0xf2, 0xca, 0x16, 0x58, 0x0f, 0xab, 0x60, 0x0b,
	0x2c, 0x04, 0xf9, 0xba, 0x61, 0x32, 0x23, 0x90, 0x86, 0x97, 0xea, 0x1c, 0xf7, 0xdc, 0xe3, 0x7b,
	0x8f, 0x6f, 0xe0, 0x84, 0x77, 0x72, 0xde, 0x1d, 0x94, 0x51, 0x24, 0xe4, 0x9d, 0xcc, 0x1f, 0xef,
	0x94, 0xda, 0x35, 0x62, 0xc1, 0x3b, 0xb9, 0xe0, 0xfb, 0xbd, 0x32, 0xdc, 0x48, 0xb5, 0xd7, 0x4e,
	0x42, 0x9f, 0x40, 0xb0, 0xae, 0x49, 0x06, 0x49, 0x2b, 0xb4, 0xe6, 0x3b, 0x91, 0xf9, 0x85, 0x3f,
	0x3b, 0x61, 0x03, 0xa5, 0x09, 0x4c, 0x3e, 0xb4, 0x9d, 0xe9, 0xe9, 0x5b, 0x88, 0xdf, 0xb7, 0xd5,
	0xb5, 0x30, 0x84, 0x40, 0xb4, 0x95, 0xcd, 0xa0, 0x44, 0x4c, 0xce, 0x21, 0xac, 0x45, 0x9f, 0x05,
	0x85, 0x3f, 0x4b, 0x99, 0x85, 0xf6, 0xe4, 0x86, 0x37, 0x59, 0xe8, 0x4e, 0x6e, 0x78, 0x43, 0xe7,
	0xe8, 0x50, 0x3e, 0xd4, 0x81, 0x16, 0x30, 0x65, 0x42, 0x2f, 0x7b, 0x23, 0x34, 0xf9, 0x1f, 0x26,
	0x1b, 0x0b, 0xb0, 0x24, 0x65, 0x8e, 0xd0, 0x97, 0x90, 0xb8, 0x9e, 0xf4, 0x1f, 0x2d, 0x09, 0x44,
	0xb5, 0xe8, 0x75, 0x16, 0x14, 0xe1, 0x2c, 0x65, 0x88, 0xe9, 0x17, 0x2c, 0xf9, 0x24, 0xfa, 0xbf,
	0x96, 0x6c, 0x0f, 0xaa, 0x3d, 0xb6, 0x81, 0xd8, 0xde, 0xdd, 0xc8, 0x56, 0x1a, 0x9c, 0xe5, 0x8c,
	0x39, 0x42, 0x1e, 0x41, 0xac, 0xb6, 0x5b, 0x2d, 0x4c, 0x16, 0xe1, 0xf1, 0x91, 0xd9, 0x39, 0xb8,
	0xfe, 0x9c, 0x4d, 0x0a, 0x7f, 0x36, 0x65, 0x16, 0xd2, 0x0b, 0x48, 0x98, 0xd0, 0xc3, 0x95, 0xd8,
	0x91, 0x3f, 0xea, 0xc8, 0x0d, 0x51, 0xfe, 0xcb, 0x10, 0x2e, 0x99, 0x2b, 0x2e, 0x0f, 0x98, 0x4c,
	0x67, 0xc1, 0xd1, 0xd3, 0x91, 0x63, 0xd6, 0x2b, 0xd1, 0x3c, 0x30, 0x6b, 0x0a, 0x31, 0x13, 0xda,
	0xea, 0x33, 0x48, 0x2a, 0xd1, 0x08, 0x23, 0x2a, 0x2c, 0x99, 0xb2, 0x81, 0xd2, 0x02, 0xc0, 0x79,
	0x7e, 0x1c, 0x92, 0xba, 0xe7, 0xfb, 0xea, 0x7b, 0x00, 0xd1, 0xba, 0xae, 0x36, 0xe4, 0x12, 0x26,
	0xd7, 0xbc, 0x5f, 0xd7, 0x04, 0xe6, 0x76, 0x1b, 0x71, 0x83, 0xf2, 0x04, 0xf1, 0xba, 0xa6, 0xe9,
	0xd7, 0x1f, 0x3f, 0xbf, 0x05, 0x31, 0xf5, 0x17, 0x6f, 0xfc, 0x4b, 0x52, 0x40, 0x68, 0xb7, 0xea,
	0x14, 0xff, 0x75, 0xcf, 0x99, 0x8f, 0xca, 0xa8, 0x47, 0x9e, 0x42, 0x58, 0x8e, 0x15, 0xa5, 0x30,
	0xf9, 0x19, 0x92, 0x61, 0x3f, 0xa8, 0x47, 0x28, 0x44, 0xb8, 0x08, 0xe9, 0xc8, 0x47, 0xdf, 0x33,
	0x7a, 0x06, 0x11, 0x3e, 0xc3, 0x6f, 0x8d, 0x65, 0x79, 0x3a, 0x58, 0x59, 0x46, 0x3d, 0xf2, 0x1c,
	0xa2, 0xf2, 0x8e, 0x93, 0x65, 0xb7, 0x17, 0x62, 0xec, 0x68, 0x16, 0xaf, 0x30, 0x99, 0xdb, 0xc6,
	0x56, 0xa2, 0xc9, 0x4f, 0x07, 0xdd, 0x4a, 0x34, 0xd4, 0x23, 0x2f, 0x00, 0x9c, 0x0a, 0x43, 0xfb,
	0x6f, 0xa4, 0xb4, 0x07, 0x77, 0xfb, 0x5b, 0x5e, 0xc0, 0xb9, 0x3a, 0xec, 0xe6, 0xaa, 0xae, 0x36,
	0xf8, 0xc3, 0x3b, 0xb9, 0x4c, 0x6c, 0xa0, 0xef, 0x3a, 0x79, 0xe5, 0x6d, 0x62, 0xfc, 0x64, 0x5f,
	0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x20, 0x17, 0xbf, 0x1c, 0xe2, 0x03, 0x00, 0x00,
}
